// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: src/api/memo/get_count_by_date.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "api.memo.get_count_by_date";

/** ログインリクエスト */
export interface QueryParameters {
  /** YYYY-MM-DD形式の日付 */
  fromDate: string;
  /** YYYY-MM-DD形式の日付 */
  toDate: string;
}

export interface CountNotesByDateList {
  countNotesByDate: CountNotesByDate[];
}

export interface CountNotesByDate {
  /** YYYY-MM-DD形式の日付 */
  date: string;
  /** 日付ごとのメモの数 */
  count: number;
}

function createBaseQueryParameters(): QueryParameters {
  return { fromDate: "", toDate: "" };
}

export const QueryParameters: MessageFns<QueryParameters> = {
  encode(message: QueryParameters, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fromDate !== "") {
      writer.uint32(10).string(message.fromDate);
    }
    if (message.toDate !== "") {
      writer.uint32(18).string(message.toDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParameters {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParameters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fromDate = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.toDate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParameters {
    return {
      fromDate: isSet(object.fromDate) ? globalThis.String(object.fromDate) : "",
      toDate: isSet(object.toDate) ? globalThis.String(object.toDate) : "",
    };
  },

  toJSON(message: QueryParameters): unknown {
    const obj: any = {};
    if (message.fromDate !== "") {
      obj.fromDate = message.fromDate;
    }
    if (message.toDate !== "") {
      obj.toDate = message.toDate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParameters>, I>>(base?: I): QueryParameters {
    return QueryParameters.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParameters>, I>>(object: I): QueryParameters {
    const message = createBaseQueryParameters();
    message.fromDate = object.fromDate ?? "";
    message.toDate = object.toDate ?? "";
    return message;
  },
};

function createBaseCountNotesByDateList(): CountNotesByDateList {
  return { countNotesByDate: [] };
}

export const CountNotesByDateList: MessageFns<CountNotesByDateList> = {
  encode(message: CountNotesByDateList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.countNotesByDate) {
      CountNotesByDate.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CountNotesByDateList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCountNotesByDateList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.countNotesByDate.push(CountNotesByDate.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CountNotesByDateList {
    return {
      countNotesByDate: globalThis.Array.isArray(object?.countNotesByDate)
        ? object.countNotesByDate.map((e: any) => CountNotesByDate.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CountNotesByDateList): unknown {
    const obj: any = {};
    if (message.countNotesByDate?.length) {
      obj.countNotesByDate = message.countNotesByDate.map((e) => CountNotesByDate.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CountNotesByDateList>, I>>(base?: I): CountNotesByDateList {
    return CountNotesByDateList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CountNotesByDateList>, I>>(object: I): CountNotesByDateList {
    const message = createBaseCountNotesByDateList();
    message.countNotesByDate = object.countNotesByDate?.map((e) => CountNotesByDate.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCountNotesByDate(): CountNotesByDate {
  return { date: "", count: 0 };
}

export const CountNotesByDate: MessageFns<CountNotesByDate> = {
  encode(message: CountNotesByDate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.date !== "") {
      writer.uint32(10).string(message.date);
    }
    if (message.count !== 0) {
      writer.uint32(16).int32(message.count);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CountNotesByDate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCountNotesByDate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.date = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CountNotesByDate {
    return {
      date: isSet(object.date) ? globalThis.String(object.date) : "",
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
    };
  },

  toJSON(message: CountNotesByDate): unknown {
    const obj: any = {};
    if (message.date !== "") {
      obj.date = message.date;
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CountNotesByDate>, I>>(base?: I): CountNotesByDate {
    return CountNotesByDate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CountNotesByDate>, I>>(object: I): CountNotesByDate {
    const message = createBaseCountNotesByDate();
    message.date = object.date ?? "";
    message.count = object.count ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
