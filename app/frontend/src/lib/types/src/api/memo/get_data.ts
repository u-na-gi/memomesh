// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: src/api/memo/get_data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "api.memo.get_data";

/** ログインリクエスト */
export interface QueryParameters {
  /** YYYY-MM-DD形式の日付 */
  date: string;
}

export interface MemoList {
  data: Memo[];
}

export interface Memo {
  /** YYYY-MM-DD形式の日付 */
  date: string;
  /** メモのID */
  id: string;
  /** 日付ごとのメモの数 */
  shortContents: string;
}

function createBaseQueryParameters(): QueryParameters {
  return { date: "" };
}

export const QueryParameters: MessageFns<QueryParameters> = {
  encode(message: QueryParameters, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.date !== "") {
      writer.uint32(10).string(message.date);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParameters {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParameters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.date = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParameters {
    return { date: isSet(object.date) ? globalThis.String(object.date) : "" };
  },

  toJSON(message: QueryParameters): unknown {
    const obj: any = {};
    if (message.date !== "") {
      obj.date = message.date;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParameters>, I>>(base?: I): QueryParameters {
    return QueryParameters.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParameters>, I>>(object: I): QueryParameters {
    const message = createBaseQueryParameters();
    message.date = object.date ?? "";
    return message;
  },
};

function createBaseMemoList(): MemoList {
  return { data: [] };
}

export const MemoList: MessageFns<MemoList> = {
  encode(message: MemoList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.data) {
      Memo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MemoList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMemoList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data.push(Memo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MemoList {
    return { data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => Memo.fromJSON(e)) : [] };
  },

  toJSON(message: MemoList): unknown {
    const obj: any = {};
    if (message.data?.length) {
      obj.data = message.data.map((e) => Memo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MemoList>, I>>(base?: I): MemoList {
    return MemoList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MemoList>, I>>(object: I): MemoList {
    const message = createBaseMemoList();
    message.data = object.data?.map((e) => Memo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMemo(): Memo {
  return { date: "", id: "", shortContents: "" };
}

export const Memo: MessageFns<Memo> = {
  encode(message: Memo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.date !== "") {
      writer.uint32(10).string(message.date);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.shortContents !== "") {
      writer.uint32(26).string(message.shortContents);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Memo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMemo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.date = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.shortContents = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Memo {
    return {
      date: isSet(object.date) ? globalThis.String(object.date) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      shortContents: isSet(object.shortContents) ? globalThis.String(object.shortContents) : "",
    };
  },

  toJSON(message: Memo): unknown {
    const obj: any = {};
    if (message.date !== "") {
      obj.date = message.date;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.shortContents !== "") {
      obj.shortContents = message.shortContents;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Memo>, I>>(base?: I): Memo {
    return Memo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Memo>, I>>(object: I): Memo {
    const message = createBaseMemo();
    message.date = object.date ?? "";
    message.id = object.id ?? "";
    message.shortContents = object.shortContents ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
